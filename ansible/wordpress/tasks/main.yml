---
- name: Install prerequisites Amazon
  when: 
  - ansible_facts['distribution'] == "Amazon"
  package:
    name: "{{ item }}"
    state: present
  with_items:
  - httpd
  - php-{{ php_version }}
  - php-mysql-{{ php_version }}
  - telnet
  notify: Start webserver

- name: Get wordpress 
  when: 
  - ansible_facts['distribution'] == "Amazon"
  get_url:
    url: https://wordpress.org/wordpress-{{ wordpress_version }}.tar.gz
    dest: /tmp/wordpress-{{ wordpress_version }}.tar.gz 
    mode: '0440'


- name: Unzip Wordpress
  when: 
  - ansible_facts['distribution'] == "Amazon"
  unarchive:
    src: /tmp/wordpress-{{ wordpress_version }}.tar.gz
    dest: /var/www/html/
    remote_src: true
  

- name: Move wordpress
  when: 
  - ansible_facts['distribution'] == "Amazon"
  shell: "cp -r  /var/www/html/wordpress/*   /var/www/html || exit 0"
  ignore_errors: true
- name: cache
  when: 
  - ansible_facts['distribution'] == "Ubuntu"  
  apt:
    update_cache: yes

- name: Install prerequisites Ubuntu
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  package:
    name: "{{ item }}"
    state: present
  with_items:
  - apache2
  - php
  - php-mcrypt
  - php-mysql
  - php-common
  - php-mysql
  - php-tidy
  - php-xml
  - php-xmlrpc
  - php-mbstring
  - php-memcached
  - php-curl
  - php-zip

  notify: Start webserver Ubuntu

- name: Install MySQL Python
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  apt:
    name: python-mysqldb
    state: present
 
- name: install MySQL Server
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  apt:
    name: mysql-server
    state: present
 
- name: install MySQL Client
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  apt:
    name: mysql-client
    state: present
 
- name: install MySQL Common
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  apt:
    name: mysql-common
    state: present
 
- name: ensure MySQL always starts
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  service:
    name: mysql
    state: started
    enabled: yes
- name: Concantenate the install and directory into a single variable
  set_fact:
    path: /var/www/public_html
 
- name: Ensure that installation directory exists
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  file: path={{path}} state=directory
  
- name: Download Latest Version to /tmp
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  get_url: url=https://wordpress.org/latest.tar.gz force=no dest=/tmp/wordpress.tar.gz
  
 
- name: Extract archive
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  unarchive: src=/tmp/wordpress.tar.gz dest=/tmp copy=no
  
 
 
- name: Move extracted directory to {{path}}
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  shell: cp -r -n /tmp/wordpress/* /var/www/public_html
  
 
 
- name: Remove wordpress.tar.gz
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  file: path=/tmp/wordpress.tar.gz state=absent
  
 
- name: Fetch random salts for WordPress config
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  local_action: command curl https://api.wordpress.org/secret-key/1.1/salt/
  register: "wp_salt"
  become: no
  become_method: sudo
 
 

- name: Ensure group "somegroup" exists
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  ansible.builtin.group:
    name: devops
    state: present

- name: Allow 'devops' group to have passwordless sudo
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%devops'
    line: '%devops ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'


- name: Add user to Ubuntu
  when: 
  - ansible_facts['distribution'] == "Ubuntu"
  ansible.builtin.user:
    name: "{{ item }}"
  with_items:
  - "{{ users }}"

